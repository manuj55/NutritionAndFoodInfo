{"version":3,"sources":["Layout/Layout.js","App.js","reportWebVitals.js","index.js"],"names":["TabPane","Tabs","Layout","React","useState","nutrition","setNutrition","food","setFood","data","setData","searchByName","setSearchByName","YOUR_APP_ID","YOUR_APP_KEY","searchString","a","fetch","encodeURIComponent","responseData","json","method","body","JSON","stringify","headers","then","response","error","message","catch","err","parsed","useEffect","AddNutrition","getDescription","title","bordered","Item","label","calories","cautions","dietLabels","healthLabels","map","item","totalWeight","Object","keys","totalNutrientsKCal","quantity","style","width","height","defaultActiveKey","centered","tab","display","justifyContent","marginBottom","marginRight","onClick","padding","Search","placeholder","onSearch","value","FetchNutrition","labelCol","span","wrapperCol","name","initialValues","remember","onFinish","values","prep","ingr","rules","required","offset","type","htmlType","FetchFood","src","image","alt","category","categoryLabel","foodId","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8fcab24.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form } from \"antd\";\nimport { Input, Button, Tabs, Descriptions, message } from \"antd\";\nconst { TabPane } = Tabs;\nconst Layout = () => {\n  const [nutrition, setNutrition] = React.useState();\n  const [food, setFood] = React.useState();\n  const [data, setData] = React.useState();\n  const [searchByName, setSearchByName] = React.useState(true);\n  const layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16,\n    },\n  };\n\n  const YOUR_APP_ID = \"c0717e14\";\n  const YOUR_APP_KEY = \"a68b338d935a5f20e6551203c39fb28c\";\n  async function FetchNutrition(searchString) {\n    const responseData = await fetch(\n      `https://api.edamam.com/api/nutrition-data?app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}&ingr=${encodeURIComponent(\n        searchString\n      )}`\n    );\n    const data = await responseData.json();\n    setNutrition(data);\n    // console.log(data);\n  }\n  async function AddNutrition() {\n    const responseData = await fetch(\n      `https://api.edamam.com/api/nutrition-details?app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}`,\n      {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\n      }\n    )\n      .then((response) => response.json())\n      .then((json) => {\n        if (json.error) {\n          message.error(json.error);\n        } else {\n          setNutrition(json);\n        }\n      })\n      .catch((err) => message.error(err));\n    // const data = await responseData.json();\n    // setNutrition(data);\n    // console.log(data);\n  }\n  async function FetchFood(searchString) {\n    const responseData = await fetch(\n      `https://api.edamam.com/api/food-database/v2/parser?ingr=${encodeURIComponent(\n        searchString\n      )}&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}`\n    );\n    const data = await responseData.json();\n    // setNutrition(data);\n    setFood(data.parsed[0].food);\n    // console.log(data);\n  }\n  const onFinish = (values) => {\n    // console.log(\"Success:\", values);\n    setNutrition();\n    setData({ title: values.title, prep: values.prep, ingr: [values.ingr] });\n  };\n  React.useEffect(() => {\n    if (data) {\n      AddNutrition();\n    }\n  }, [data]);\n  //   const onFinishFailed = (errorInfo) => {\n  //     console.log(\"Failed:\", errorInfo);\n  //   };\n  const onSearch = (value) => {\n    FetchNutrition(value);\n  };\n  const onSearchFood = (value) => {\n    FetchFood(value);\n  };\n  const getDescription = () => {\n    return (\n      nutrition && (\n        <div>\n          <Descriptions title=\"Nutrition Info\" bordered>\n            <Descriptions.Item label=\"Calories\">\n              {nutrition.calories}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Cautions\">\n              {nutrition.cautions[0]}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Diet Labels\">\n              {nutrition.dietLabels[0]}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Health Labels\">\n              {nutrition.healthLabels.map((item) => {\n                return item + \" \" + \",\";\n              })}\n            </Descriptions.Item>\n            <Descriptions.Item label=\"totalWeight\">\n              {nutrition.totalWeight}\n            </Descriptions.Item>\n            {Object.keys(nutrition.totalNutrientsKCal).map((item) => {\n              return (\n                <Descriptions.Item\n                  label={nutrition.totalNutrientsKCal[item].label}\n                >\n                  {nutrition.totalNutrientsKCal[item].quantity}\n                </Descriptions.Item>\n              );\n            })}\n          </Descriptions>\n        </div>\n      )\n    );\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n      }}\n    >\n      {/* <Button onClick={() => AddNutrition()}>Add Data</Button> */}\n      <Tabs defaultActiveKey=\"1\" centered>\n        <TabPane tab=\"Food Data Base\" key=\"1\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              marginBottom: \"20px\",\n            }}\n          >\n            <Button\n              style={{ marginRight: \"10px\" }}\n              onClick={() => {\n                setSearchByName(false);\n\n                setNutrition();\n              }}\n            >\n              {\" \"}\n              Check Nutrition Data By adding ingredient and Preparation steps\n            </Button>\n            <Button\n              onClick={() => {\n                setSearchByName(true);\n                setNutrition();\n              }}\n            >\n              Search Nutrition{\" \"}\n            </Button>\n          </div>\n          {!searchByName ? (\n            <>\n              <Form\n                style={{ width: \"80%\" }}\n                {...layout}\n                name=\"basic\"\n                initialValues={{\n                  remember: true,\n                }}\n                onFinish={onFinish}\n                // onFinishFailed={onFinishFailed}\n              >\n                <Form.Item\n                  label=\"Title\"\n                  name=\"title\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input title!\",\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Preparation\"\n                  name=\"prep\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your password!\",\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n                <Form.Item\n                  label=\"Ingredient \"\n                  name=\"ingr\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input ingredient!\",\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Submit\n                  </Button>\n                </Form.Item>\n              </Form>\n              {getDescription()}\n            </>\n          ) : (\n            <div style={{ padding: \"20px\" }}>\n              <Input.Search\n                placeholder=\"input search text\"\n                onSearch={onSearch}\n                style={{ width: 200, marginBottom: \"20px\" }}\n              />\n              {getDescription()}\n            </div>\n          )}\n        </TabPane>\n        <TabPane tab=\"Nutrition Data Base\" key=\"2\">\n          <div style={{ padding: \"20px\" }}>\n            <Input.Search\n              placeholder=\"input ingredient \"\n              onSearch={onSearchFood}\n              style={{ width: 200, marginBottom: \"20px\" }}\n            />\n            {/* {getDescription()} */}\n            {food && (\n              <div>\n                <img src={food.image} alt=\"Image\" width=\"200\" height=\"200\" />\n                <Descriptions title=\"Food Detail\" bordered>\n                  <Descriptions.Item label=\"label\">\n                    {food.label}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"Category\">\n                    {food.category}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"Category Label\">\n                    {food.categoryLabel}\n                  </Descriptions.Item>\n                  <Descriptions.Item label=\"Food Id\">\n                    {food.foodId}\n                  </Descriptions.Item>\n                </Descriptions>\n              </div>\n            )}\n          </div>\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Layout;\n","import \"./App.css\";\nimport Layout from \"../src/Layout/Layout\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout></Layout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}